[1mdiff --git a/ProyectoUberAlgo2 b/ProyectoUberAlgo2[m
[1m--- a/ProyectoUberAlgo2[m
[1m+++ b/ProyectoUberAlgo2[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit c0f0eb74b61328ba3c24e3fc1fb4cf8885b0db45[m
[32m+[m[32mSubproject commit c0f0eb74b61328ba3c24e3fc1fb4cf8885b0db45-dirty[m
[1mdiff --git a/entidades/__pycache__/graph.cpython-311.pyc b/entidades/__pycache__/graph.cpython-311.pyc[m
[1mindex ea5049b..d40e858 100644[m
Binary files a/entidades/__pycache__/graph.cpython-311.pyc and b/entidades/__pycache__/graph.cpython-311.pyc differ
[1mdiff --git a/entidades/__pycache__/linkedlist.cpython-311.pyc b/entidades/__pycache__/linkedlist.cpython-311.pyc[m
[1mindex 23a9ab5..543d065 100644[m
Binary files a/entidades/__pycache__/linkedlist.cpython-311.pyc and b/entidades/__pycache__/linkedlist.cpython-311.pyc differ
[1mdiff --git a/entidades/graph.py b/entidades/graph.py[m
[1mindex 0912a77..5af8a4d 100644[m
[1m--- a/entidades/graph.py[m
[1m+++ b/entidades/graph.py[m
[36m@@ -3,7 +3,6 @@[m [mfrom entidades.myqueue import *[m
 from entidades.linkedlist import *[m
 from entidades.mystack import *[m
 import math[m
[31m-import servicios.MapaServicio as ms[m
 """Ejercicio 1[m
 Implementar la funci√≥n crear grafo que dada una lista de v√©rtices y una lista de aristas cree un grafo con la representaci√≥n por [m
 Lista de Adyacencia.[m
[36m@@ -322,6 +321,7 @@[m [mdef convertToDFSTree(grafo, u):[m
                 u = vertices[i].head.key[m
             j += 1[m
             DFS = convertToDFSTreeR(grafo,u-1,vertices,j,time,DFS,arcosRetroceso,arcosRetroceso_T_o_F,arcoAvance,arcoCruce)[m
[32m+[m[32m    printDic(DFS)[m
     return DFS[m
 [m
 [m
[36m@@ -760,36 +760,21 @@[m [mdef graph_Matriz_D(LV, LA):[m
                 matriz[i][j] = 0         [m
     return matriz [m
 [m
[31m-def initRelax(grafo,s): #distancia y padre[m
[31m-    vertice = grafo.head.copy()[m
[31m-    for i in range(0,len(grafo.head)):[m
[31m-        if i != s-1:[m
[31m-            if vertice[i]!=None:[m
[31m-                vertice[i].head.value[0] = float('inf')[m
[31m-                vertice[i].head.value[1] = None[m
[31m-        else:[m
[31m-            if vertice[i]!=None:[m
[31m-                vertice[i].head.value[0] = 0[m
[31m-                vertice[i].head.value[1] = None[m
[31m-    printDic(vertice)[m
[31m-    return vertice[m
[31m-[m
[31m-[m
[31m-"""def initRelax(grafo,s): #distancia[m
[31m-    vertice = [None]*len(grafo.head)[m
[31m-    for i in range(0,len(grafo.head)):[m
[31m-        if i != s-1:[m
[32m+[m[32mdef initRelax(grafo,s): #distancia[m
[32m+[m[32m    vertice = [None]*len(grafo)[m
[32m+[m[32m    for i in range(0,len(grafo)):[m
[32m+[m[32m        if i != s:[m
             vertice[i]=float('inf')[m
         else:[m
             vertice[i]=0[m
     return vertice[m
 [m
 def initRelax2(grafo,s): #padre[m
[31m-    vertice = [None]*len(grafo.head)[m
[31m-    for i in range(0,len(grafo.head)):[m
[31m-        if i != s-1:[m
[32m+[m[32m    vertice = [None]*len(grafo)[m
[32m+[m[32m    for i in range(0,len(grafo)):[m
[32m+[m[32m        if i != s:[m
             vertice[i]=None[m
[31m-    return vertice"""[m
[32m+[m[32m    return vertice[m
 [m
 def minQueue(v):[m
     Q = LinkedList()[m
[36m@@ -797,8 +782,8 @@[m [mdef minQueue(v):[m
         if v[i] != None:[m
             current = Q.head[m
             Node = PriorityNode()[m
[31m-            Node.value = v[i].head.key        #vertice[m
[31m-            Node.priority = v[i].head.value[0]  #distancia[m
[32m+[m[32m            Node.value = i        #vertice[m
[32m+[m[32m            Node.priority = v[i]  #distancia[m
 [m
             priority = Node.priority[m
             if current == None:[m
[36m@@ -825,69 +810,33 @@[m [mdef minQueue(v):[m
     return Q[m
 [m
 [m
[31m-def relax(grafo,vertice,u,v,verticeP,distancias):[m
[31m-    if vertice[u] + v[1] < vertice[v[0]-1]:[m
[31m-        vertice[v[0]-1]= vertice[u]+ v[1][m
[31m-        verticeP[v[0]-1] = u + 1[m
[31m-        distancias[v[0]-1] = vertice[u]+ v[1][m
[31m-    return[m
[31m-[m
[31m-"""[m
 def relax(grafo,vertice,u,v,verticeP):[m
     if vertice[u] + grafo[u][v] < vertice[v]:[m
         vertice[v]= vertice[u]+ grafo[u][v][m
         verticeP[v] = u[m
     return[m
[31m-"""[m
 [m
 def camino(verticeP,s,v):[m
[31m-    v -= 1[m
[31m-    longitud = len(verticeP)[m
[31m-    slot = (v % longitud)-1[m
[31m-    if verticeP[slot] == None:[m
[32m+[m[32m    if verticeP[v] == None:[m
         return None[m
     else:[m
[31m-        llegada = v + 1[m
[32m+[m[32m        llegada = v[m
         camino = LinkedList()[m
[31m-        add(camino,llegada)[m
[32m+[m[32m        add(camino,v)[m
         while llegada != s:[m
[31m-            slot = (v % longitud)-1[m
[31m-            llegada = verticeP[slot].value[1][m
[32m+[m[32m            llegada = verticeP[v][m
             add(camino,llegada)[m
[31m-            v = llegada - 1[m
[32m+[m[32m            v = llegada[m
         return camino[m
 [m
 def shortestPath(grafo, s, v):[m
[31m-    vertice = initRelax(grafo,s) #distancia, padre[m
[31m-    #verticeP = initRelax2(grafo,s) #padre[m
[31m-    verticeAux = vertice.copy()[m
[31m-    #####visitado seria el value[1] y distancias el value[0][m
[31m-    distancias = [0]*len(vertice)[m
[31m-    visitado = [None]*len(grafo.head)[m
[32m+[m[32m    vertice = initRelax(grafo,s) #distancia[m
[32m+[m[32m    verticeP = initRelax2(grafo,s) #padre[m
[32m+[m[32m    verticeAux = vertice[m
[32m+[m[32m    visitado = [None]*len(grafo)[m
     Q = minQueue(vertice)[m
[31m-    printLista(Q)[m
[31m-    longitud = len(grafo.head)[m
[31m-    while length(Q) > 0:[m
[31m-        u = dequeue(Q)[m
[31m-        slot = (u % longitud)-1[m
[31m-        node = grafo.head[slot]    ###[m
[31m-        if node != None:[m
[31m-            node = node.head[m
[31m-        while node != None:[m
[31m-            slot = (node.value[0]-1 % longitud)-1 #slot del visitado[m
[31m-            if visitado[slot] == None:[m
[31m-                relax(grafo,vertice,u,node.value,distancias)[m
[31m-            node = node.nextNode[m
[31m-        slot = (u % longitud)-1[m
[31m-        visitado[slot].value[0] = u + 1[m
[31m-        verticeAux[slot].value[0] = None #value[0]=distancia[m
[31m-        Q = minQueue(verticeAux)[m
[31m-    return camino(vertice,s,v), distancias[m
[31m-    #ARREGLAR TODO EN FUNCION A LA FUNCION DE BUSCAR VERTICE (CON EL LINEAR PROBING):[m
[31m-    #en todos los casos que llamo a un hash con su slot deberia verificar si es el correspondiente[m
[31m-    #y sino aplicar linear probing[m
[31m-    #ver el tema de la distancia entre las esquinas (¬øsumarlas antes o despues?)[m
[31m-"""[m
[32m+[m
[32m+[m
     while length(Q) > 0:[m
         u = dequeue(Q)[m
         for i in range(0,len(grafo)):[m
[36m@@ -897,4 +846,6 @@[m [mdef shortestPath(grafo, s, v):[m
         visitado[u] = u[m
         verticeAux[u] = None[m
         Q = minQueue(verticeAux)[m
[31m-"""[m
\ No newline at end of file[m
[32m+[m
[32m+[m[32m    return camino(verticeP,s,v)[m
[41m+[m
[1mdiff --git a/entidades/linkedlist.py b/entidades/linkedlist.py[m
[1mindex b8da809..729dcee 100644[m
[1m--- a/entidades/linkedlist.py[m
[1m+++ b/entidades/linkedlist.py[m
[36m@@ -12,14 +12,6 @@[m [mdef printLista(L):[m
     current = current.nextNode[m
   print('')[m
 [m
[31m-def printListaX2(L):[m
[31m-  current = L.head[m
[31m-  while current != None:[m
[31m-    print(current.key, end=" ")[m
[31m-    print(current.value)[m
[31m-    current = current.nextNode[m
[31m-  print('')[m
[31m-[m
 def add(L,element):[m
   current = L.head[m
   nuevoNodo = Node()[m
[1mdiff --git a/main.py b/main.py[m
[1mindex 2d6bae3..7a70865 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -4,16 +4,10 @@[m [mimport servicios.serializacion[m
 import servicios.MapaServicio as ms[m
 import servicios.UbicacionFijaServic